/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type EVMTokenAmountStructOutput = [string, BigNumber] & {
    token: string;
    amount: BigNumber;
  };
}

export interface CcipFeeLibInterface extends utils.Interface {
  functions: {
    "getCcipTokenTransferBatchFee(uint64,address,(address,uint256)[],bool,address,address,uint8)": FunctionFragment;
    "getCcipTokenTransferFee(uint64,address,address,uint256,bool,address,address,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getCcipTokenTransferBatchFee"
      | "getCcipTokenTransferFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCcipTokenTransferBatchFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      Client.EVMTokenAmountStruct[],
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCcipTokenTransferFee",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCcipTokenTransferBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCcipTokenTransferFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CcipFeeLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CcipFeeLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCcipTokenTransferBatchFee(
      destinationChainSelector: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      tokensToSendDetails: Client.EVMTokenAmountStruct[],
      isEao: PromiseOrValue<boolean>,
      router: PromiseOrValue<string>,
      link: PromiseOrValue<string>,
      payFeesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;

    getCcipTokenTransferFee(
      destinationChainSelector: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      isEao: PromiseOrValue<boolean>,
      router: PromiseOrValue<string>,
      link: PromiseOrValue<string>,
      payFeesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fee: BigNumber }>;
  };

  getCcipTokenTransferBatchFee(
    destinationChainSelector: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    tokensToSendDetails: Client.EVMTokenAmountStruct[],
    isEao: PromiseOrValue<boolean>,
    router: PromiseOrValue<string>,
    link: PromiseOrValue<string>,
    payFeesIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCcipTokenTransferFee(
    destinationChainSelector: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    isEao: PromiseOrValue<boolean>,
    router: PromiseOrValue<string>,
    link: PromiseOrValue<string>,
    payFeesIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getCcipTokenTransferBatchFee(
      destinationChainSelector: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      tokensToSendDetails: Client.EVMTokenAmountStruct[],
      isEao: PromiseOrValue<boolean>,
      router: PromiseOrValue<string>,
      link: PromiseOrValue<string>,
      payFeesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCcipTokenTransferFee(
      destinationChainSelector: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      isEao: PromiseOrValue<boolean>,
      router: PromiseOrValue<string>,
      link: PromiseOrValue<string>,
      payFeesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getCcipTokenTransferBatchFee(
      destinationChainSelector: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      tokensToSendDetails: Client.EVMTokenAmountStruct[],
      isEao: PromiseOrValue<boolean>,
      router: PromiseOrValue<string>,
      link: PromiseOrValue<string>,
      payFeesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCcipTokenTransferFee(
      destinationChainSelector: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      isEao: PromiseOrValue<boolean>,
      router: PromiseOrValue<string>,
      link: PromiseOrValue<string>,
      payFeesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCcipTokenTransferBatchFee(
      destinationChainSelector: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      tokensToSendDetails: Client.EVMTokenAmountStruct[],
      isEao: PromiseOrValue<boolean>,
      router: PromiseOrValue<string>,
      link: PromiseOrValue<string>,
      payFeesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCcipTokenTransferFee(
      destinationChainSelector: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      isEao: PromiseOrValue<boolean>,
      router: PromiseOrValue<string>,
      link: PromiseOrValue<string>,
      payFeesIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
